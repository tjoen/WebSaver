<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExtractModuleFileWrite" xml:space="preserve">
    <value>Unable to write screensaver module
{0}
{1}</value>
  </data>
  <data name="ExtractModuleLoadResourceBytes" xml:space="preserve">
    <value>Unable to load screensaver module
{0}</value>
  </data>
  <data name="InjectCaptionFileRead" xml:space="preserve">
    <value>Unable to read caption file
{0}
{1}</value>
  </data>
  <data name="InjectContentCreateArchive" xml:space="preserve">
    <value>Unable to create archive from content directory
{0}
{1}
{2}</value>
  </data>
  <data name="InjectContentDeleteArchive" xml:space="preserve">
    <value>Unable to delete archive
{0}
{1}</value>
  </data>
  <data name="InjectContentGetTemp" xml:space="preserve">
    <value>Unable to get temporary file path
{0}</value>
  </data>
  <data name="InjectContentReadArchive" xml:space="preserve">
    <value>Unable to read archive
{0}
{1}</value>
  </data>
  <data name="InjectIconFileRead" xml:space="preserve">
    <value>Unable to read icon file
{0}
{1}</value>
  </data>
  <data name="InjectIconParseICO" xml:space="preserve">
    <value>Unable to parse ico file
{0}
{1}</value>
  </data>
  <data name="InjectIconPEToFile" xml:space="preserve">
    <value>Unable to save icon to file
{0}
{1}</value>
  </data>
  <data name="InjectResourceBeginUpdateResource" xml:space="preserve">
    <value>Unable to begin update resource
{0}
{1}</value>
  </data>
  <data name="InjectResourceCompleteUpdateResource" xml:space="preserve">
    <value>Unable to complete update resource
{0}
{1}</value>
  </data>
  <data name="InjectResourceUpdateResource" xml:space="preserve">
    <value>Unable to update resource
{0}
{1}</value>
  </data>
  <data name="MainExtractModule" xml:space="preserve">
    <value>Extracting module...</value>
  </data>
  <data name="MainInjectCaption" xml:space="preserve">
    <value>Injecting caption...</value>
  </data>
  <data name="MainInjectContent" xml:space="preserve">
    <value>Injecting content...</value>
  </data>
  <data name="MainInjectIcon" xml:space="preserve">
    <value>Injecting icon...</value>
  </data>
  <data name="MainSuccess" xml:space="preserve">
    <value>Screensaver successfully saved.
{0}</value>
  </data>
  <data name="MainValidateArgs" xml:space="preserve">
    <value>Validating arguments...</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Generates Win32 screensaver from web content.

SCRGEN src [cap] [ico] out

  src  web content directory path   (with "index.html")
  cap  caption file path            (UTF-8 TXT)
  ico  icon file path               (ICO)
  out  output screensaver file path (SCR)
  
Application will try to use "caption.txt" and "icon.ico" files as caption and icon of screensaver from parent directory of &lt;src&gt; and &lt;src&gt; directory itself if [cap] and [ico] arguments are not specified.</value>
  </data>
  <data name="ValidateArgsCaptionFile" xml:space="preserve">
    <value>Caption file does not exist
{0}</value>
  </data>
  <data name="ValidateArgsContentFile" xml:space="preserve">
    <value>Content file does not exist
{0}</value>
  </data>
  <data name="ValidateArgsIconFile" xml:space="preserve">
    <value>Icon file does not exist
{0}</value>
  </data>
  <data name="ValidateArgsOutputFile" xml:space="preserve">
    <value>Output file already exists
{0}</value>
  </data>
  <data name="ValidateArgsSourceDirectory" xml:space="preserve">
    <value>Source directory does not exist
{0}</value>
  </data>
  <data name="WriteOutputFileWrite" xml:space="preserve">
    <value>Unable to write file
{0}
{1}</value>
  </data>
  <data name="WriteOutputUpdateMainIcon" xml:space="preserve">
    <value>Unable to update icon
{0}
{1}</value>
  </data>
  <data name="WriteOutputUpdateStringTable" xml:space="preserve">
    <value>Unable to update string table
{0}
{1}</value>
  </data>
</root>